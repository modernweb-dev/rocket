/* eslint-disable @typescript-eslint/ban-ts-comment */
import { existsSync } from 'fs';
import path from 'path';
import { debuglog } from 'util';
import { RocketHeader } from '../file-header/RocketHeader.js';
import { cleanupAutoGeneratedFiles } from '../formats/cleanupAutoGeneratedFiles.js';

const logRendering = debuglog('engine:rendering');

/**
 * @param {object} options
 * @param {string} options.inputDir
 * @param {(sourceFilePath: string) => string} options.getSourceFilePathFromUrl
 * @param {(sourceFilePath: string) => string} options.getOutputFilePath
 * @param {import('../web-menu/PageTree.js').PageTree} options.pageTree
 * @param {(options: { sourceFilePath: String; rocketHeader?: RocketHeader; throwOnError?: boolean }) => Promise<import('../../types/main.js').renderWorkerResult>} options.renderFile
 * @param {(options?: { triggerSourceFilePath?: string, deleteOtherFiles?: boolean}) => void} options.renderAllOpenedFiles
 * @param {{ inputDir: string; longFileHeaderWidth: number; longFileHeaderComment: string; }} options._rocketHeaderDefaults
 * @returns {import('../../types/main.js').DevServerPlugin}
 */
export function devServerRegisterTab({
  inputDir,
  getSourceFilePathFromUrl,
  getOutputFilePath,
  pageTree,
  renderFile,
  renderAllOpenedFiles,
  _rocketHeaderDefaults,
}) {
  return {
    name: 'register-tab-plugin',
    injectWebSocket: true,
    /**
     * @param {import('koa').Context} context
     */
    serve: async context => {
      if (context.path === '/ws-register-tab.js') {
        return "import { sendMessage } from '/__web-dev-server__web-socket.js';\n export default () => { sendMessage({ type: 'register-tab', pathname: document.location.pathname }); }";
      }

      // generating files on demand
      const sourceFilePath = await getSourceFilePathFromUrl(context.path);
      if (sourceFilePath) {
        const outputFilePath = getOutputFilePath(sourceFilePath);
        if (!existsSync(outputFilePath)) {
          const sourceRelativeFilePath = path.relative(inputDir, sourceFilePath);
          const rocketHeader = new RocketHeader({
            sourceFilePath,
            ..._rocketHeaderDefaults,
          });
          await rocketHeader.syncDataCascade();
          logRendering(`${sourceRelativeFilePath} because it got requested by a browser tab.`);
          try {
            const result = await renderFile({ sourceFilePath, rocketHeader });
            await pageTree.add(sourceRelativeFilePath);
            await pageTree.save();
            await cleanupAutoGeneratedFiles(result);
            if (pageTree.needsAnotherRenderingPass) {
              logRendering(`${sourceRelativeFilePath} again as the pageTree was modified.`);
              const result = await renderFile({ sourceFilePath });
              await cleanupAutoGeneratedFiles(result);
              await renderAllOpenedFiles({ triggerSourceFilePath: sourceFilePath });
              pageTree.needsAnotherRenderingPass = false;
            }
          } catch (error) {
            // nothing as error already rendered to file
          }
        }
      }
    },
  };
}
